import os
import asyncio
import uuid
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (KeyboardButton, ReplyKeyboardMarkup, 
                          InlineKeyboardMarkup, InlineKeyboardButton, 
                          BotCommand, CallbackQuery, ReplyKeyboardRemove)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from sqlalchemy import Column, Integer, BigInteger, String, Text as SQLText, DateTime, Boolean, select, func, ForeignKey
from sqlalchemy.orm import relationship, declarative_base
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import sessionmaker

# ========== CONFIG ==========
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./anonbot.db")

if not BOT_TOKEN or BOT_TOKEN == "YOUR_TOKEN_HERE":
    raise RuntimeError("–£–∫–∞–∂–∏ BOT_TOKEN –≤ .env –∏–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

# ========== DB ==========
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    tg_id = Column(BigInteger, unique=True, index=True, nullable=True)
    username = Column(String(128), unique=True, index=True, nullable=True)
    unique_code = Column(String(32), unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    messages = relationship("Message", back_populates="receiver", cascade="all,delete-orphan")

class Message(Base):
    __tablename__ = "messages"
    id = Column(Integer, primary_key=True)
    sender_tg_id = Column(BigInteger, nullable=True)
    receiver_user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    text = Column(SQLText, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    delivered = Column(Boolean, default=False, nullable=False)
    
    receiver = relationship("User", back_populates="messages")

engine = create_async_engine(DATABASE_URL, echo=False, pool_pre_ping=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# ========== Keyboards ==========
def reply_button(message_id: int):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{message_id}")]
        ]
    )
    return kb

# ========== FSM ==========
class Flow(StatesGroup):
    awaiting_username = State()
    awaiting_message_for_username = State()
    awaiting_message_by_link = State()
    awaiting_reply = State()

# ========== Texts & helpers ==========
MAX_TG_MESSAGE_LEN = 4096

INVITE_TEXT = "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
SENT_TEXT = "‚úÖ –ì–æ—Ç–æ–≤–æ! –ñ–¥–∏ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
INBOX_PREFIX = "üì• –í–∞–º –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ:\n\n"
REPLY_BUTTON_TEXT = "‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å"
REPLY_PROMPT = "üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –∞–≤—Ç–æ—Ä—É."
REPLY_SENT = "üöÄ –û—Ç–≤–µ—Ç —É–∂–µ —É –∞–¥—Ä–µ—Å–∞—Ç–∞."
REPLY_INBOX_PREFIX = "üì® –í–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ –æ—Ç–≤–µ—Ç:\n\n"
BAD_LINK = "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
SELF_LINK_NOTE = "‚ÑπÔ∏è –≠—Ç–æ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–≥–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–∫–∏."
NOT_REGISTERED_NOTICE = (
    "üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n"
    "–ö–æ–≥–¥–∞ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è ‚Äî –º—ã –¥–æ—Å—Ç–∞–≤–∏–º –ø–∏—Å—å–º–æ –∏ —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è."
)

def clamp(text: str, max_len: int = MAX_TG_MESSAGE_LEN - 100) -> str:
    text = (text or "").strip()
    return text if len(text) <= max_len else text[:max_len-1] + "‚Ä¶"

async def ensure_schema():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# ========== Bot init ==========
bot = Bot(BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username"), KeyboardButton(text="üîó –ú–æ—è —Å—Å—ã–ª–∫–∞")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

# ========== DB helpers ==========
async def generate_unique_code(session: AsyncSession, length: int = 8) -> str:
    while True:
        code = uuid.uuid4().hex[:length]
        r = await session.execute(select(func.count()).select_from(User).where(User.unique_code == code))
        if r.scalar_one() == 0:
            return code

async def get_user_by_tg(session: AsyncSession, tg_id: int):
    r = await session.execute(select(User).where(User.tg_id == tg_id))
    return r.scalars().first()

async def get_user_by_username(session: AsyncSession, username: str):
    if not username:
        return None
    r = await session.execute(select(User).where(User.username == username))
    return r.scalars().first()

async def get_user_by_code(session: AsyncSession, code: str):
    r = await session.execute(select(User).where(User.unique_code == code))
    return r.scalars().first()

async def create_placeholder_by_username(session: AsyncSession, username: str):
    user = await get_user_by_username(session, username)
    if user:
        return user
    code = await generate_unique_code(session)
    user = User(tg_id=None, username=username, unique_code=code)
    session.add(user)
    await session.commit()
    await session.refresh(user)
    return user

async def create_or_update_user_on_start(session: AsyncSession, tg_id: int, username: str | None):
    user = await get_user_by_tg(session, tg_id)
    if user:
        if username and user.username != username:
            user.username = username
            session.add(user)
            await session.commit()
            await session.refresh(user)
        return user
    
    if username:
        placeholder = await get_user_by_username(session, username)
        if placeholder and placeholder.tg_id is None:
            placeholder.tg_id = tg_id
            session.add(placeholder)
            await session.commit()
            await session.refresh(placeholder)
            return placeholder
    
    code = await generate_unique_code(session)
    user = User(tg_id=tg_id, username=username, unique_code=code)
    session.add(user)
    await session.commit()
    await session.refresh(user)
    return user

# ========== Handlers ==========
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    username = message.from_user.username
    tg_id = message.from_user.id
    async with AsyncSessionLocal() as s:
        user = await create_or_update_user_on_start(s, tg_id, username)
        res = await s.execute(select(Message).where(Message.receiver_user_id == user.id, Message.delivered == False).order_by(Message.created_at))
        pending = res.scalars().all()

    me = await bot.me()
    link = f"https://t.me/{me.username}?start={user.unique_code}"

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–¥—Ä—É–≥'}!\n–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}",
        reply_markup=menu_kb
    )

    if pending:
        await message.answer(f"üì¨ –£ —Ç–µ–±—è –µ—Å—Ç—å {len(pending)} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –¥–æ—Å—Ç–∞–≤–ª—è—é –∏—Ö:")
        async with AsyncSessionLocal() as s:
            for msg in pending:
                try:
                    kb = InlineKeyboardBuilder()
                    kb.button(text=REPLY_BUTTON_TEXT, callback_data=f"reply_msg:{msg.id}")
                    await bot.send_message(user.tg_id, INBOX_PREFIX + f"[{msg.created_at.strftime('%Y-%m-%d %H:%M')}] \n{msg.text}", reply_markup=kb.as_markup())
                    msg.delivered = True
                    s.add(msg)
                    await s.commit()
                except Exception:
                    pass
                if msg.sender_tg_id:
                    try:
                        await bot.send_message(msg.sender_tg_id, f"‚úÖ –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ {msg.created_at.strftime('%Y-%m-%d %H:%M')}, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    except Exception:
                        pass

@dp.message(Command(commands=["my", "link"]))
async def cmd_my(message: types.Message):
    async with AsyncSessionLocal() as s:
        user = await get_user_by_tg(s, message.from_user.id)
        if not user:
            user = await create_or_update_user_on_start(s, message.from_user.id, message.from_user.username)
    me = await bot.me()
    await message.answer(f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{me.username}?start={user.unique_code}", reply_markup=menu_kb)

@dp.message(F.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username")
async def menu_send_username(message: types.Message, state: FSMContext):
    await state.set_state(Flow.awaiting_username)
    await message.answer("–í–≤–µ–¥–∏ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –±–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ivan_ivanov).", reply_markup=cancel_kb)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb)

@dp.message(Flow.awaiting_username)
async def got_username(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if message.text in ["‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username", "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"]:
        await state.clear()
        if message.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username":
            await menu_send_username(message, state)
        else:
            await cmd_my(message)
        return
        
    username = (message.text or "").strip().lstrip("@")
    if not username:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_kb)
        return
        
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å username
    if not re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=cancel_kb)
        return
        
    # create placeholder if needed and save receiver id in state
    async with AsyncSessionLocal() as s:
        user = await create_placeholder_by_username(s, username)
    await state.update_data(receiver_user_id=user.id, receiver_tg_id=user.tg_id, receiver_username=username)
    await state.set_state(Flow.awaiting_message_for_username)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è @{username}.", reply_markup=ReplyKeyboardRemove())

@dp.message(Command(commands=["send"]))
async def cmd_send_inline(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    await state.clear()
    
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /send @username")
        return
    username = parts[1].lstrip("@").strip()
    if not username:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π username.")
        return
    async with AsyncSessionLocal() as s:
        user = await create_placeholder_by_username(s, username)
    await state.update_data(receiver_user_id=user.id, receiver_tg_id=user.tg_id, receiver_username=username)
    await state.set_state(Flow.awaiting_message_for_username)
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –∞–Ω–æ–Ω–∏–º–∫—É @{username}. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")

@dp.message(Flow.awaiting_message_for_username)
async def got_message_for_username(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if message.text in ["‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username", "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"]:
        await state.clear()
        if message.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username":
            await menu_send_username(message, state)
        else:
            await cmd_my(message)
        return
        
    data = await state.get_data()
    receiver_user_id = data.get("receiver_user_id")
    receiver_tg_id = data.get("receiver_tg_id")
    receiver_username = data.get("receiver_username")
    if not receiver_user_id:
        await message.answer("–û—à–∏–±–∫–∞ ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return
    text = clamp(message.text or message.caption or "")
    if not text:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ù–∞–ø–µ—á–∞—Ç–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å.")
        return

    async with AsyncSessionLocal() as s:
        msg = Message(sender_tg_id=message.from_user.id, receiver_user_id=receiver_user_id, text=text, delivered=False)
        s.add(msg)
        await s.commit()
        await s.refresh(msg)

        if receiver_tg_id:
            try:
                kb = InlineKeyboardBuilder()
                kb.button(text=REPLY_BUTTON_TEXT, callback_data=f"reply_msg:{msg.id}")
                await bot.send_message(receiver_tg_id, INBOX_PREFIX + text, reply_markup=kb.as_markup())
                msg.delivered = True
                s.add(msg)
                await s.commit()
                try:
                    await bot.send_message(message.from_user.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.")
                except Exception:
                    pass
            except Exception:
                pass
        else:
            await message.answer(NOT_REGISTERED_NOTICE)

    await state.clear()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=menu_kb)

@dp.message(F.text.startswith("/start "))
async def deeplink_start(message: types.Message, state: FSMContext):
    try:
        code = message.text.split(maxsplit=1)[1].strip()
    except Exception:
        await message.answer(BAD_LINK)
        return
    async with AsyncSessionLocal() as s:
        owner = await get_user_by_code(s, code)
    if not owner:
        await message.answer(BAD_LINK)
        return
    if owner.tg_id == message.from_user.id:
        await message.answer(SELF_LINK_NOTE)
        return
    await state.update_data(receiver_user_id=owner.id, receiver_tg_id=owner.tg_id, receiver_username=owner.username)
    await state.set_state(Flow.awaiting_message_by_link)
    await message.answer(INVITE_TEXT)

@dp.message(Flow.awaiting_message_by_link)
async def got_message_by_link(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if message.text in ["‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username", "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"]:
        await state.clear()
        if message.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username":
            await menu_send_username(message, state)
        else:
            await cmd_my(message)
        return
        
    data = await state.get_data()
    receiver_user_id = data.get("receiver_user_id")
    receiver_tg_id = data.get("receiver_tg_id")
    if not receiver_user_id:
        await message.answer(BAD_LINK)
        await state.clear()
        return
    text = clamp(message.text or message.caption or "")
    if not text:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ù–∞–ø–µ—á–∞—Ç–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å.")
        return

    async with AsyncSessionLocal() as s:
        msg = Message(sender_tg_id=message.from_user.id, receiver_user_id=receiver_user_id, text=text, delivered=False)
        s.add(msg)
        await s.commit()
        await s.refresh(msg)

        if receiver_tg_id:
            try:
                kb = InlineKeyboardBuilder()
                kb.button(text=REPLY_BUTTON_TEXT, callback_data=f"reply_msg:{msg.id}")
                await bot.send_message(receiver_tg_id, INBOX_PREFIX + text, reply_markup=kb.as_markup())
                msg.delivered = True
                s.add(msg)
                await s.commit()
                try:
                    await bot.send_message(message.from_user.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.")
                except Exception:
                    pass
            except Exception:
                pass
        else:
            await message.answer(NOT_REGISTERED_NOTICE)

    await state.clear()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=menu_kb)

@dp.callback_query(F.data.startswith("reply_msg:"))
async def on_reply_click(callback: types.CallbackQuery, state: FSMContext):
    payload = callback.data.split(":", 1)[1]
    try:
        msg_id = int(payload)
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
        return
    async with AsyncSessionLocal() as s:
        res = await s.execute(select(Message).where(Message.id == msg_id))
        orig = res.scalars().first()
    if not orig:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    if not orig.sender_tg_id:
        await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é ‚Äî –∞–≤—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω.", show_alert=True)
        return
    await state.update_data(target_sender_tg_id=orig.sender_tg_id)
    await state.set_state(Flow.awaiting_reply)
    await callback.message.answer(REPLY_PROMPT, reply_markup=cancel_kb)
    await callback.answer()

@dp.message(Flow.awaiting_reply)
async def got_reply_text(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if message.text in ["‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username", "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞"]:
        await state.clear()
        if message.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ username":
            await menu_send_username(message, state)
        else:
            await cmd_my(message)
        return
        
    data = await state.get_data()
    target_tg = data.get("target_sender_tg_id")
    if not target_tg:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        await state.clear()
        return
    text = clamp(message.text or message.caption or "")
    if not text:
        await message.answer("–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å.")
        return
    try:
        await bot.send_message(target_tg, REPLY_INBOX_PREFIX + text)
        await message.answer(REPLY_SENT, reply_markup=menu_kb)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.", reply_markup=menu_kb)
    await state.clear()

@dp.message(F.text == "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞")
async def menu_my_link(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    await state.clear()
    await cmd_my(message)

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        BotCommand(command="my", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É"),
        BotCommand(command="send", description="/send @username ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ username"),
    ]
    await bot.set_my_commands(commands)

# ========== Main ==========
async def main():
    await ensure_schema()
    await set_bot_commands()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass